<template style=" background-color: #421e53">
  <div id="app" style="margin-top: 0; padding-top: 0; padding-bottom: 8rem;">
    <header class="header">
      <div class="bg-transparent" style="padding-top: 1rem;">
        <div class="container">
          <nav class="navbar navbar-expand-lg navbar-light">
            <a class="navbar-brand justify-content-start" style="color: white; font-family: 'Roboto', sans-serif">
              Money available {{money_available}}€
            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
              <div class="navbar-nav w-100 justify-content-end">
                <div v-if="logged">
                  <div v-if="cart_empty">
                    <button class="btn btn-outline-success" type="submit" style="margin-right: 1.5rem; margin-left: 1.5rem;">
                      <font-awesome-icon icon="shopping-basket" size="lg" style="color: #ffffff"/>
                    </button>
                  </div>
                  <div v-else>
                    <button class="btn btn-outline-success" type="submit" style="margin-right: 1.5rem; margin-left: 1.5rem;">
                      <font-awesome-icon icon="shopping-basket" size="lg" style="color: #55ffff"/>
                    </button>
                  </div>
                </div>
                <div v-if="logged">
                  <a class="nav-item a-neon" href="#" @click="forgetUser" style="font-size: 17px;">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Log Out
                  </a>
                </div>
                <div v-else>
                  <a class="nav-item a-neon" href="#" @click="goToLogin">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Log In
                  </a>
                </div>
              </div>
            </div>
          </nav>
        </div>
      </div>
      <br>
    </header>
    <div v-if="isadmin">
      <a href="#" class="btn btn-primary" @click="showFormNew" style="margin-right: 3rem">Add Event</a>
      <a href="#" class="btn btn-primary" @click="showFormModify">Modify Event</a>
    </div>
    <div class="row row-cols-1 row-cols-md-3" style="margin-left: 8rem; margin-right: 8rem" id="content">
      <div class="col-lg-4 col-sm-6 mb-4" style="position: center" v-for="(show) in shows" :key="show.id">
        <br>
        <div class="card">
          <img class="card-img-top" src="../assets/lilac.png" alt="Card image cap">
          <div class="white-box" style="width: 4rem; height: 4rem; margin: 0.5rem">
            <h6 style="font-family: 'Roboto'; font-weight: normal">{{ show.month }}</h6>
            <h6 style="font-family: 'Roboto'; font-weight: bold; font-size: 1.3rem">{{ show.day }}</h6>
          </div>
          <div class="card-body">
            <h5 class="card-title">{{ show.name }}</h5>
            <p class="card-text">
              <div v-for="(artist) in show.artists" :key="artist.id">
                <h6 class="card-text">{{ artist.name }}</h6>
              </div>
              <br>
              <font-awesome-icon icon="map-marker-alt" size="lg" style="color: #ffffff"/> {{ show.place.name }}, {{ show.place.city }}
            <h6 class="price">
              <h4>{{ show.price }}<sup>€</sup></h4>
            </h6>
            <p class="card-text"><small class="text-muted" style="color: #ffffff">{{ show.total_available_tickets }} tickets avaible</small></p>
            <div v-if="logged">
              <div v-if="isadmin">
                <a href="#" class="btn btn-primary" @click="showFormAddArtist (show)">Add artist</a>
                <p></p>
                <a href="#" class="btn btn-primary" @click="showFormRemoveArtist (show)">Remove Artist</a>
                <p></p>
                <a href="#" class="btn btn-primary" @click="removeShow (show)">Delete event</a>
              </div>
              <div v-else>
                <a href="#" class="btn btn-primary" @click="addEventToCart (show)">Add to cart</a>
              </div>
            </div>
            <div v-else>
              <a href="#" class="btn btn-primary" @click="goToLogin ()">Log in to buy</a>
            </div>

          </div>
        </div>
      </div>
    </div>

    <b-modal ref="addShowModal"
             id="event-modal"
             title="Add new event"
             hide-footer>
      <b-form @submit="onSubmit" @reset="onReset" v-if="show_modal_toggle">
        <b-form-group label="Name:" label-for="input-1">
          <b-form-input
            id="input-1"
            v-model="addShowForm.name"
            placeholder="Enter event name"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Price:" label-for="input-2">
          <b-form-input
            id="input-2"
            v-model="addShowForm.price"
            type="number"
            placeholder="Enter price"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Date:" label-for="input-3">
          <b-form-datepicker date-disabled-fn="dateDisabled"
            id="input-3"
            v-model="addShowForm.date"
            required
          ></b-form-datepicker>
        </b-form-group>

        <b-form-group label="Place:" label-for="input-6">
          <b-form-input
            id="input-6"
            v-model="addShowForm.place"
            placeholder="Enter name place"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="city:" label-for="input-8">
          <b-form-input
            id="input-8"
            v-model="addShowForm.city"
            placeholder="Enter city"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="country:" label-for="input-9">
          <b-form-input
            id="input-9"
            v-model="addShowForm.country"
            placeholder="Enter country"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Tickets:" label-for="input-7">
          <b-form-input
            id="input-7"
            v-model="addShowForm.total_available_tickets"
            type="number"
            placeholder="Enter tickets"
          ></b-form-input>
        </b-form-group>

        <b-button type="submit" variant="primary">Submit</b-button>
        <b-button type="reset" variant="danger">Reset</b-button>
      </b-form>
    </b-modal>
    <b-modal ref="editShowModal"
             id="event-modal"
             title="Update event"
             size="lg"
             hide-footer>
      <b-form @submit="onSubmitUpdate" @reset="onReset" v-if="show_modal_toggle">
        <b-form-group label="Id:" label-for="input-0">
          <b-form-input
            id="input-0"
            v-model="editShowForm.id"
            type="number"
            placeholder="Enter id"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Name:" label-for="input-1">
          <b-form-input
            id="input-1"
            v-model="editShowForm.name"
            placeholder="Enter event name"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Price:" label-for="input-2">
          <b-form-input
            id="input-2"
            v-model="editShowForm.price"
            type="number"
            placeholder="Enter price"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Date:" label-for="input-3">
          <b-form-datepicker
            id="input-3"
            v-model="editShowForm.date"
          ></b-form-datepicker>
        </b-form-group>

        <b-form-group label="Place:" label-for="input-6">
          <b-form-input
            id="input-6"
            v-model="editShowForm.place"
            placeholder="Enter name place"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="city:" label-for="input-8">
          <b-form-input
            id="input-8"
            v-model="editShowForm.city"
            placeholder="Enter city"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="country:" label-for="input-9">
          <b-form-input
            id="input-9"
            v-model="editShowForm.country"
            placeholder="Enter country"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Tickets:" label-for="input-7">
          <b-form-input
            id="input-7"
            v-model="editShowForm.total_available_tickets"
            type="number"
            placeholder="Enter tickets"
            required
          ></b-form-input>
        </b-form-group>

        <b-button type="submit" variant="primary">Submit</b-button>
        <b-button type="reset" variant="danger">Reset</b-button>
      </b-form>
    </b-modal>

    <b-modal ref="addArtistModal"
             id="artist-modal"
             title="Add new artist"
             hide-footer>
      <b-form @submit="onSubmitAddArtist" @reset="onReset" v-if="show_modal_toggle">
        <b-form-group label="Name:" label-for="input-1">
          <b-form-input
            id="input-1"
            v-model="addArtistForm.name"
            placeholder="Enter artist name"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Country:" label-for="input-2">
          <b-form-input
            id="input-2"
            v-model="addArtistForm.country"
            placeholder="Enter country"
            required
          ></b-form-input>
        </b-form-group>

        <b-button type="submit" variant="primary">Submit</b-button>
        <b-button type="reset" variant="danger">Reset</b-button>
      </b-form>
    </b-modal>
    <b-modal ref="removeArtistModal"
             id="remove-artist-modal"
             title="Remove artist"
             hide-footer>
      <b-form @submit="onSubmitRemoveArtist" @reset="onReset" v-if="show_modal_toggle">
        <b-form-group label="Id:" label-for="input-1">
          <b-form-input
            id="input-1"
            v-model="removeArtistForm.id"
            placeholder="Enter artist id"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Name:" label-for="input-2">
          <b-form-input
            id="input-2"
            v-model="removeArtistForm.name"
            placeholder="Enter artist name"
            required
          ></b-form-input>
        </b-form-group>

        <b-button type="submit" variant="primary">Submit</b-button>
        <b-button type="reset" variant="danger">Reset</b-button>
      </b-form>
    </b-modal>
  </div>
</template>

<script>
import axios from 'axios'
import '../../bootstrap/css/bootstrap.css'

export default {
  data () {
    return {
      tickets_bought: 0,
      tickets_available: 500,
      money_available: 72,
      money_total: 72,
      price_event: 30,
      total_tickets: 20,
      remaining_tickets: 20,
      logged: false,
      cart_empty: true,
      isadmin: false,
      username: '',
      token: '',
      show_modal_toggle: false,
      shows_added: [],
      tickets: [],
      addShowForm: {
        place: '',
        name: '',
        city: '',
        date: '',
        price: '',
        total_available_tickets: ''
      },
      editShowForm: {
        id: '',
        name: '',
        place: '',
        date: '',
        price: '',
        city: '',
        country: '',
        total_available_tickets: ''
      },
      addArtistForm: {
        name: '',
        country: ''
      },
      removeArtistForm: {
        id: '',
        name: ''
      },
      shows: []
    }
  },
  created () {
    this.getShows()
    this.logged = this.$route.query.logged
    this.username = this.$route.query.username
    this.token = this.$route.query.token
    if (this.logged) {
      this.checkIsAdmin()
    }
    // this.getAvailabeMoney()
  },
  methods: {
    buyTickets () {
      this.tickets_bought += 1
      this.money()
    },
    returnTickets () {
      this.remaining_tickets = this.total_tickets - this.tickets_bought
    },
    money () {
      this.money_available = this.money_total - (this.tickets_bought * this.price_event)
    },
    addEventToCart (show) {
      this.shows_added.push(show)
      if (this.shows_added.length > 0) {
        this.cart_empty = false
      }
    },
    getShows () {
      const path = 'http://localhost:5000/shows'
      axios.get(path)
        .then((res) => {
          this.shows = res.data.shows
        })
        .catch((error) => {
          console.error(error)
        })
    },
    goToLogin () {
      this.$router.replace({path: '/userlogin', query: {}})
    },
    checkIsAdmin () {
      const path = `http://localhost:5000/account/` + this.username
      axios.get(path)
        .then((res) => {
          if (res.data.account.admin === 1) {
            this.isadmin = true
          }
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.error(error)
        })
    },
    forgetUser () {
      this.logged = false
      this.username = ''
      this.token = ''
      this.isadmin = false
      this.money_available = 0
      this.$router.replace({path: '/', query: {}})
    },
    addShow (parametres) {
      const path = `http://localhost:5000/show`
      axios.post(path, parametres, {auth: {username: this.token}})
        .then(() => {
          console.log('Show added')
          this.getShows()
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.log(error)
          this.getShows()
        })
    },
    onSubmit (evt) {
      evt.preventDefault()
      this.$refs.addShowModal.hide()
      const parameters = {
        place: this.addShowForm.place,
        name: this.addShowForm.name,
        city: this.addShowForm.city,
        country: this.addShowForm.country,
        date: this.addShowForm.date,
        price: this.addShowForm.price,
        total_available_tickets: this.addShowForm.total_available_tickets
      }
      this.addShow(parameters)
      this.initForm()
      this.getShows()
      this.show_modal_toggle = false
    },
    onSubmitAddArtist (evt) {
      evt.preventDefault()
      this.$refs.addArtistModal.hide()
      const parameters = {
        name: this.addArtistForm.name,
        country: this.addArtistForm.country,
        disciplines: ''
      }
      this.addArtist(parameters)
      this.initForm()
      this.getShows()
      this.show_modal_toggle = false
    },
    onReset (evt) {
      evt.preventDefault()
      this.initForm()
      this.show_modal_toggle = false
      this.$nextTick(() => {
        this.show_modal_toggle = true
      })
    },
    updateShow (parameters) {
      const path = `http://localhost:5000/show/${this.editShowForm.id}`
      axios.put(path, parameters, {auth: {username: this.token}})
        .then(() => {
          console.log('Show Updated')
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.log(error)
        })
      this.getShows()
    },
    onSubmitUpdate (evt) {
      evt.preventDefault()
      this.$refs.editShowModal.hide()
      const parameters = {
        id: this.editShowForm.id,
        name: this.editShowForm.name,
        price: this.editShowForm.price,
        date: this.editShowForm.date,
        country: this.editShowForm.country,
        city: this.editShowForm.city,
        place: this.editShowForm.place,
        total_available_tickets: this.editShowForm.total_available_tickets
      }
      this.updateShow(parameters)
      this.initForm()
      this.getShows()
      this.show_modal_toggle = false
    },
    onSubmitAddArtistInShow (evt) {
      evt.preventDefault()
      this.$refs.addArtistModal.hide()
      const parameters = {
        name: this.addArtistForm.name,
        country: this.addArtistForm.country,
        genre: this.addArtistForm.genre
      }
      this.addNewArtist(parameters)
    },
    addNewArtist (parametres) {
      const path = `http://localhost:5000/artist`
      axios.post(path, parametres, {auth: {username: this.token}})
        .then(() => {
          console.log('Orders done')
          this.addArtistInShow(parametres)
          this.getShows()
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.log(error)
          this.addArtistInShow(parametres)
          this.getShows()
        })
    },
    addArtistInShow (parametres) {
      const showid = this.show_to_modify.id
      const path = `http://localhost:5000/show/${showid}/artist`
      axios.post(path, parametres, {auth: {username: this.token}})
        .then(() => {
          console.log('Orders done')
          this.getShows()
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.log(error)
          this.getShows()
        })
      this.initForm()
    },
    // sale error si le llamamos como el anterior aunque no tenga param
    // puede que no haga falta este metodo
    eventWhereModifyArtist (show) {
      this.show_to_modify = show
      this.$refs['deleteArtistModal'].show()
    },
    onSubmitDeleteArtistInShow (evt) {
      evt.preventDefault()
      this.$refs.deleteArtistModal.hide()
      this.deleteArtistInEvent()
    },
    deleteNewArtist (parametres) {
      const showid = this.show_to_modify.id
      const artistid = this.deleteArtistForm.id
      const path = `http://localhost:5000/show/${showid}/artist/${artistid}`
      axios.delete(path, {auth: {username: this.token}})
        .then(() => {
          console.log('Artist Deleted')
          this.getShows()
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.log(error)
          this.getShows()
        })
      this.initForm()
    },
    removeShow (show) {
      let showid = show.id
      const path = `http://localhost:5000/show/${showid}`
      axios.delete(path, {auth: {username: this.token}})
        .then(() => {
          console.log('Orders done')
          this.initForm()
          this.getShows()
        })
        .catch((error) => {
          // eslint-disable-next-line
          console.log(error)
          this.getShows()
        })
    },
    showFormNew () {
      this.show_modal_toggle = true
      this.$refs['addShowModal'].show()
    },
    showFormModify () {
      this.show_modal_toggle = true
      this.$refs['editShowModal'].show()
    },
    showFormAddArtist (show) {
      this.show_to_modify = show
      this.show_modal_toggle = true
      this.$refs['addArtistModal'].show()
    },
    showFormRemoveArtist (show) {
      this.show_to_modify = show
      this.show_modal_toggle = true
      this.$refs['removeArtistModal'].show()
    },
    initForm () {
      this.addShowForm.place = ''
      this.addShowForm.name = ''
      this.addShowForm.date = ''
      this.addShowForm.price = ''
      this.addShowForm.city = ''
      this.addShowForm.country = ''
      this.addShowForm.total_available_tickets = ''
      this.editShowForm.id = ''
      this.editShowForm.name = ''
      this.editShowForm.place = ''
      this.editShowForm.date = ''
      this.editShowForm.price = ''
      this.editShowForm.city = ''
      this.editShowForm.country = ''
      this.editShowForm.total_available_tickets = ''
      this.addArtistForm.name = ''
      this.addArtistForm.country = ''
      this.addArtistForm.genre = ''
      this.addArtistForm.name = ''
      this.addArtistForm.country = ''
      this.removeArtistForm.id = ''
      this.removeArtistForm.name = ''
    }
  }
}
</script>
